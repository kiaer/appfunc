// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 2 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
 
open AST

# 10 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | COLON
  | COMMA
  | PRINT
  | ASG
  | SKIP
  | SEMI
  | WHILE
  | IF
  | FI
  | REC
  | CALL
  | PROC
  | DO
  | OD
  | CONTOF
  | LET
  | IN
  | END
  | THEN
  | ELSE
  | RETURN
  | TRUE
  | FALSE
  | NAME of (string)
  | STRING of (string)
  | BOOL of (bool)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_PRINT
    | TOKEN_ASG
    | TOKEN_SKIP
    | TOKEN_SEMI
    | TOKEN_WHILE
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_REC
    | TOKEN_CALL
    | TOKEN_PROC
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_CONTOF
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_END
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_RETURN
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_NAME
    | TOKEN_STRING
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM__startExp
    | NONTERM__startExpList
    | NONTERM__startDecList
    | NONTERM__startStm
    | NONTERM__startStmList
    | NONTERM__startDec
    | NONTERM_Main
    | NONTERM_Stm
    | NONTERM_StmList
    | NONTERM_Dec
    | NONTERM_DecList
    | NONTERM_NAMEList
    | NONTERM_Exp
    | NONTERM_ExpList

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | COLON  -> 3 
  | COMMA  -> 4 
  | PRINT  -> 5 
  | ASG  -> 6 
  | SKIP  -> 7 
  | SEMI  -> 8 
  | WHILE  -> 9 
  | IF  -> 10 
  | FI  -> 11 
  | REC  -> 12 
  | CALL  -> 13 
  | PROC  -> 14 
  | DO  -> 15 
  | OD  -> 16 
  | CONTOF  -> 17 
  | LET  -> 18 
  | IN  -> 19 
  | END  -> 20 
  | THEN  -> 21 
  | ELSE  -> 22 
  | RETURN  -> 23 
  | TRUE  -> 24 
  | FALSE  -> 25 
  | NAME _ -> 26 
  | STRING _ -> 27 
  | BOOL _ -> 28 
  | INT _ -> 29 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_COLON 
  | 4 -> TOKEN_COMMA 
  | 5 -> TOKEN_PRINT 
  | 6 -> TOKEN_ASG 
  | 7 -> TOKEN_SKIP 
  | 8 -> TOKEN_SEMI 
  | 9 -> TOKEN_WHILE 
  | 10 -> TOKEN_IF 
  | 11 -> TOKEN_FI 
  | 12 -> TOKEN_REC 
  | 13 -> TOKEN_CALL 
  | 14 -> TOKEN_PROC 
  | 15 -> TOKEN_DO 
  | 16 -> TOKEN_OD 
  | 17 -> TOKEN_CONTOF 
  | 18 -> TOKEN_LET 
  | 19 -> TOKEN_IN 
  | 20 -> TOKEN_END 
  | 21 -> TOKEN_THEN 
  | 22 -> TOKEN_ELSE 
  | 23 -> TOKEN_RETURN 
  | 24 -> TOKEN_TRUE 
  | 25 -> TOKEN_FALSE 
  | 26 -> TOKEN_NAME 
  | 27 -> TOKEN_STRING 
  | 28 -> TOKEN_BOOL 
  | 29 -> TOKEN_INT 
  | 32 -> TOKEN_end_of_input
  | 30 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM__startExp 
    | 2 -> NONTERM__startExpList 
    | 3 -> NONTERM__startDecList 
    | 4 -> NONTERM__startStm 
    | 5 -> NONTERM__startStmList 
    | 6 -> NONTERM__startDec 
    | 7 -> NONTERM_Main 
    | 8 -> NONTERM_Stm 
    | 9 -> NONTERM_Stm 
    | 10 -> NONTERM_Stm 
    | 11 -> NONTERM_Stm 
    | 12 -> NONTERM_Stm 
    | 13 -> NONTERM_Stm 
    | 14 -> NONTERM_Stm 
    | 15 -> NONTERM_Stm 
    | 16 -> NONTERM_StmList 
    | 17 -> NONTERM_StmList 
    | 18 -> NONTERM_Dec 
    | 19 -> NONTERM_Dec 
    | 20 -> NONTERM_Dec 
    | 21 -> NONTERM_DecList 
    | 22 -> NONTERM_DecList 
    | 23 -> NONTERM_DecList 
    | 24 -> NONTERM_NAMEList 
    | 25 -> NONTERM_NAMEList 
    | 26 -> NONTERM_NAMEList 
    | 27 -> NONTERM_Exp 
    | 28 -> NONTERM_Exp 
    | 29 -> NONTERM_Exp 
    | 30 -> NONTERM_Exp 
    | 31 -> NONTERM_Exp 
    | 32 -> NONTERM_Exp 
    | 33 -> NONTERM_Exp 
    | 34 -> NONTERM_ExpList 
    | 35 -> NONTERM_ExpList 
    | 36 -> NONTERM_ExpList 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 32 
let _fsyacc_tagOfErrorTerminal = 30

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | PRINT  -> "PRINT" 
  | ASG  -> "ASG" 
  | SKIP  -> "SKIP" 
  | SEMI  -> "SEMI" 
  | WHILE  -> "WHILE" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | REC  -> "REC" 
  | CALL  -> "CALL" 
  | PROC  -> "PROC" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | CONTOF  -> "CONTOF" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | END  -> "END" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | RETURN  -> "RETURN" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | NAME _ -> "NAME" 
  | STRING _ -> "STRING" 
  | BOOL _ -> "BOOL" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | ASG  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | CALL  -> (null : System.Object) 
  | PROC  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | CONTOF  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 0us; 1us; 10us; 65535us; 0us; 14us; 8us; 9us; 10us; 46us; 21us; 46us; 26us; 46us; 38us; 46us; 40us; 46us; 47us; 46us; 56us; 57us; 63us; 64us; 6us; 65535us; 10us; 11us; 21us; 22us; 26us; 27us; 38us; 39us; 40us; 41us; 47us; 48us; 4us; 65535us; 6us; 65us; 12us; 13us; 24us; 65us; 66us; 65us; 3us; 65535us; 6us; 7us; 24us; 25us; 66us; 67us; 3us; 65535us; 54us; 55us; 61us; 62us; 69us; 70us; 13us; 65535us; 2us; 3us; 4us; 83us; 17us; 18us; 19us; 20us; 29us; 30us; 33us; 83us; 36us; 37us; 44us; 45us; 50us; 51us; 75us; 76us; 77us; 78us; 80us; 83us; 84us; 83us; 4us; 65535us; 4us; 5us; 33us; 34us; 80us; 81us; 84us; 85us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 3us; 4us; 5us; 6us; 7us; 9us; 20us; 27us; 32us; 36us; 40us; 54us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 2us; 13us; 14us; 2us; 13us; 14us; 2us; 13us; 14us; 2us; 13us; 14us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 2us; 22us; 23us; 1us; 23us; 1us; 23us; 2us; 25us; 26us; 1us; 26us; 1us; 26us; 2us; 27us; 33us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 2us; 35us; 36us; 1us; 36us; 1us; 36us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 75us; 78us; 81us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 138us; 140us; 142us; 145us; 147us; 149us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 177us; 179us; |]
let _fsyacc_action_rows = 86
let _fsyacc_actionTableElements = [|7us; 32768us; 5us; 29us; 9us; 19us; 10us; 36us; 13us; 31us; 18us; 24us; 23us; 44us; 26us; 16us; 0us; 49152us; 6us; 32768us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 0us; 49152us; 6us; 16418us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 0us; 49152us; 3us; 16405us; 12us; 58us; 14us; 52us; 26us; 49us; 0us; 49152us; 7us; 32768us; 5us; 29us; 9us; 19us; 10us; 36us; 13us; 31us; 18us; 24us; 23us; 44us; 26us; 16us; 0us; 49152us; 7us; 32768us; 5us; 29us; 9us; 19us; 10us; 36us; 13us; 31us; 18us; 24us; 23us; 44us; 26us; 16us; 0us; 49152us; 3us; 32768us; 12us; 58us; 14us; 52us; 26us; 49us; 0us; 49152us; 1us; 32768us; 0us; 15us; 0us; 16391us; 1us; 32768us; 6us; 17us; 6us; 32768us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 0us; 16392us; 6us; 32768us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 1us; 32768us; 15us; 21us; 7us; 32768us; 5us; 29us; 9us; 19us; 10us; 36us; 13us; 31us; 18us; 24us; 23us; 44us; 26us; 16us; 1us; 32768us; 16us; 23us; 0us; 16393us; 3us; 16405us; 12us; 58us; 14us; 52us; 26us; 49us; 1us; 32768us; 19us; 26us; 7us; 32768us; 5us; 29us; 9us; 19us; 10us; 36us; 13us; 31us; 18us; 24us; 23us; 44us; 26us; 16us; 1us; 32768us; 20us; 28us; 0us; 16394us; 6us; 32768us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 0us; 16395us; 1us; 32768us; 26us; 32us; 1us; 32768us; 1us; 33us; 6us; 16418us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 1us; 32768us; 2us; 35us; 0us; 16396us; 6us; 32768us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 1us; 32768us; 21us; 38us; 7us; 32768us; 5us; 29us; 9us; 19us; 10us; 36us; 13us; 31us; 18us; 24us; 23us; 44us; 26us; 16us; 2us; 32768us; 11us; 43us; 22us; 40us; 7us; 32768us; 5us; 29us; 9us; 19us; 10us; 36us; 13us; 31us; 18us; 24us; 23us; 44us; 26us; 16us; 1us; 32768us; 11us; 42us; 0us; 16397us; 0us; 16398us; 6us; 32768us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 0us; 16399us; 1us; 16400us; 8us; 47us; 7us; 32768us; 5us; 29us; 9us; 19us; 10us; 36us; 13us; 31us; 18us; 24us; 23us; 44us; 26us; 16us; 0us; 16401us; 1us; 32768us; 3us; 50us; 6us; 32768us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 0us; 16402us; 1us; 32768us; 26us; 53us; 1us; 32768us; 1us; 54us; 1us; 16408us; 26us; 68us; 1us; 32768us; 2us; 56us; 7us; 32768us; 5us; 29us; 9us; 19us; 10us; 36us; 13us; 31us; 18us; 24us; 23us; 44us; 26us; 16us; 0us; 16403us; 1us; 32768us; 14us; 59us; 1us; 32768us; 26us; 60us; 1us; 32768us; 1us; 61us; 1us; 16408us; 26us; 68us; 1us; 32768us; 2us; 63us; 7us; 32768us; 5us; 29us; 9us; 19us; 10us; 36us; 13us; 31us; 18us; 24us; 23us; 44us; 26us; 16us; 0us; 16404us; 1us; 16406us; 8us; 66us; 3us; 16405us; 12us; 58us; 14us; 52us; 26us; 49us; 0us; 16407us; 1us; 16409us; 4us; 69us; 1us; 16408us; 26us; 68us; 0us; 16410us; 1us; 16411us; 1us; 80us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 6us; 32768us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 0us; 16415us; 6us; 32768us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 1us; 32768us; 2us; 79us; 0us; 16416us; 6us; 16418us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 1us; 32768us; 2us; 82us; 0us; 16417us; 1us; 16419us; 4us; 84us; 6us; 16418us; 1us; 77us; 17us; 75us; 26us; 71us; 27us; 74us; 28us; 73us; 29us; 72us; 0us; 16420us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 9us; 16us; 17us; 24us; 25us; 29us; 30us; 38us; 39us; 47us; 48us; 52us; 53us; 55us; 56us; 58us; 65us; 66us; 73us; 75us; 83us; 85us; 86us; 90us; 92us; 100us; 102us; 103us; 110us; 111us; 113us; 115us; 122us; 124us; 125us; 132us; 134us; 142us; 145us; 153us; 155us; 156us; 157us; 164us; 165us; 167us; 175us; 176us; 178us; 185us; 186us; 188us; 190us; 192us; 194us; 202us; 203us; 205us; 207us; 209us; 211us; 213us; 221us; 222us; 224us; 228us; 229us; 231us; 233us; 234us; 236us; 237us; 238us; 239us; 246us; 247us; 254us; 256us; 257us; 264us; 266us; 267us; 269us; 276us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 5us; 5us; 2us; 5us; 7us; 5us; 2us; 1us; 3us; 3us; 6us; 7us; 0us; 1us; 3us; 0us; 1us; 3us; 1us; 1us; 1us; 1us; 2us; 3us; 4us; 0us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 65535us; 16391us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 16398us; 65535us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 16407us; 65535us; 65535us; 16410us; 65535us; 16412us; 16413us; 16414us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 65535us; 16417us; 65535us; 65535us; 16420us; |]
let _fsyacc_reductions ()  =    [| 
# 289 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 298 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startExp));
# 307 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startExpList));
# 316 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startDecList));
# 325 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startStm));
# 334 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startStmList));
# 343 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startDec));
# 352 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                               _1 
                   )
# 27 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Stm));
# 363 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                             Asg(Var _1,_3) 
                   )
# 30 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Stm));
# 375 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                       While(_2,Seq _4) 
                   )
# 31 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Stm));
# 387 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                Block(_2,Seq _4) 
                   )
# 32 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Stm));
# 399 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                PrintLn _2 
                   )
# 33 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Stm));
# 410 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Exp list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                           Call(Apply(_2,_4)) 
                   )
# 34 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Stm));
# 422 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                IfElse(_2, Seq _4, Seq _6) 
                   )
# 35 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Stm));
# 435 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                      If(_2, Seq _4) 
                   )
# 36 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Stm));
# 447 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                Return(_2) 
                   )
# 37 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Stm));
# 458 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                               [_1] 
                   )
# 41 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Stm list));
# 469 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                               _1 :: _3 
                   )
# 42 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Stm list));
# 481 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                VarDec(_1,_3) 
                   )
# 45 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Dec));
# 493 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'NAMEList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                             ProcDec(_2,_4,_6) 
                   )
# 46 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Dec));
# 506 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'NAMEList)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                RecProcDec(_3,_5,_7) 
                   )
# 47 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Dec));
# 519 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                               [] 
                   )
# 51 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Dec list));
# 529 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                              [_1] 
                   )
# 52 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Dec list));
# 540 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                              _1 :: _3 
                   )
# 53 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Dec list));
# 552 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                    [] 
                   )
# 56 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : 'NAMEList));
# 562 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                          [_1] 
                   )
# 57 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : 'NAMEList));
# 573 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'NAMEList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                      _1 :: _3 
                   )
# 58 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : 'NAMEList));
# 585 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                Var _1  
                   )
# 61 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Exp));
# 596 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                Int _1 
                   )
# 62 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Exp));
# 607 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                Bool _1 
                   )
# 63 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Exp));
# 618 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                String _1
                   )
# 64 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Exp));
# 629 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                ContOf _2 
                   )
# 65 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Exp));
# 640 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                _2 
                   )
# 66 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Exp));
# 651 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                                Apply(_1, _3) 
                   )
# 67 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Exp));
# 663 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                               [ ] 
                   )
# 70 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Exp list));
# 673 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                               [_1]   
                   )
# 71 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Exp list));
# 684 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                                                               _1 :: _3 
                   )
# 72 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fsy"
                 : Exp list));
|]
# 697 "C:\Users\Jonathan\Documents\Skole\gg\ImpProgLang\Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 33;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Stm =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let Exp lexer lexbuf : Exp =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
let ExpList lexer lexbuf : Exp list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 4))
let DecList lexer lexbuf : Dec list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 6))
let Stm lexer lexbuf : Stm =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 8))
let StmList lexer lexbuf : Stm list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 10))
let Dec lexer lexbuf : Dec =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 12))
